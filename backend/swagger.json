{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"TMatchSate": {
				"type": "string",
				"enum": [
					"ELECTION",
					"MATCH_MAP",
					"FINISHED"
				]
			},
			"ITeam": {
				"properties": {
					"passthrough": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"advantage": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"advantage"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IFixedMap": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"FIXED"
						],
						"nullable": false
					},
					"fixed": {
						"type": "string"
					}
				},
				"required": [
					"mode",
					"fixed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TWho": {
				"type": "string",
				"enum": [
					"TEAM_A",
					"TEAM_B",
					"TEAM_X",
					"TEAM_Y"
				]
			},
			"IPickMap": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"PICK"
						],
						"nullable": false
					},
					"who": {
						"$ref": "#/components/schemas/TWho"
					}
				},
				"required": [
					"mode",
					"who"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAgreeOrRandomMap": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"RANDOM_PICK",
							"AGREE"
						]
					}
				},
				"required": [
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TSideFixed": {
				"type": "string",
				"enum": [
					"TEAM_A_CT",
					"TEAM_A_T",
					"TEAM_B_CT",
					"TEAM_B_T",
					"TEAM_X_CT",
					"TEAM_X_T",
					"TEAM_Y_CT",
					"TEAM_Y_T"
				]
			},
			"IFixedSide": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"FIXED"
						],
						"nullable": false
					},
					"fixed": {
						"$ref": "#/components/schemas/TSideFixed"
					}
				},
				"required": [
					"mode",
					"fixed"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IPickSide": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"PICK"
						],
						"nullable": false
					},
					"who": {
						"$ref": "#/components/schemas/TWho"
					}
				},
				"required": [
					"mode",
					"who"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IRandomOrKnifeSide": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"RANDOM",
							"KNIFE"
						]
					}
				},
				"required": [
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IElectionStepAdd": {
				"properties": {
					"map": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/IFixedMap"
							},
							{
								"$ref": "#/components/schemas/IPickMap"
							},
							{
								"$ref": "#/components/schemas/IAgreeOrRandomMap"
							}
						]
					},
					"side": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/IFixedSide"
							},
							{
								"$ref": "#/components/schemas/IPickSide"
							},
							{
								"$ref": "#/components/schemas/IRandomOrKnifeSide"
							}
						]
					}
				},
				"required": [
					"map",
					"side"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IRandomMapBan": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"RANDOM_BAN"
						],
						"nullable": false
					}
				},
				"required": [
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IBanMap": {
				"properties": {
					"mode": {
						"type": "string",
						"enum": [
							"BAN"
						],
						"nullable": false
					},
					"who": {
						"$ref": "#/components/schemas/TWho"
					}
				},
				"required": [
					"mode",
					"who"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IElectionStepSkip": {
				"properties": {
					"map": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/IRandomMapBan"
							},
							{
								"$ref": "#/components/schemas/IBanMap"
							}
						]
					}
				},
				"required": [
					"map"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IElectionStep": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/IElectionStepAdd"
					},
					{
						"$ref": "#/components/schemas/IElectionStepSkip"
					}
				]
			},
			"TElectionState": {
				"type": "string",
				"enum": [
					"NOT_STARTED",
					"IN_PROGRESS",
					"FINISHED"
				]
			},
			"TTeamAB": {
				"type": "string",
				"enum": [
					"TEAM_A",
					"TEAM_B"
				]
			},
			"TStep": {
				"type": "string",
				"enum": [
					"MAP",
					"SIDE"
				]
			},
			"IElection": {
				"properties": {
					"state": {
						"$ref": "#/components/schemas/TElectionState"
					},
					"teamX": {
						"$ref": "#/components/schemas/TTeamAB"
					},
					"teamY": {
						"$ref": "#/components/schemas/TTeamAB"
					},
					"remainingMaps": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "Will be the same as the mapPool from the match, but will shrink when maps get picked, banned or randomly chosen."
					},
					"currentStep": {
						"type": "number",
						"format": "double",
						"description": "Index of the current electionSteps of the match."
					},
					"currentSubStep": {
						"$ref": "#/components/schemas/TStep",
						"description": "Toggles between MAP and SIDE"
					},
					"currentStepMap": {
						"type": "string",
						"description": "Current set map of the current selection step."
					},
					"currentAgree": {
						"properties": {
							"teamB": {
								"type": "string",
								"nullable": true
							},
							"teamA": {
								"type": "string",
								"nullable": true
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object",
						"description": "Holds the wanted maps of each team."
					},
					"currentRestart": {
						"properties": {
							"teamB": {
								"type": "boolean"
							},
							"teamA": {
								"type": "boolean"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object",
						"description": "The election process can be restarted if both teams vote for it."
					}
				},
				"required": [
					"state",
					"remainingMaps",
					"currentStep",
					"currentSubStep",
					"currentAgree",
					"currentRestart"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IGameServer": {
				"properties": {
					"ip": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"rconPassword": {
						"type": "string"
					},
					"hideRconPassword": {
						"type": "boolean"
					}
				},
				"required": [
					"ip",
					"port",
					"rconPassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TMatchMapSate": {
				"type": "string",
				"enum": [
					"PENDING",
					"MAP_CHANGE",
					"WARMUP",
					"KNIFE",
					"AFTER_KNIFE",
					"IN_PROGRESS",
					"PAUSED",
					"FINISHED"
				]
			},
			"IMatchMap": {
				"properties": {
					"name": {
						"type": "string",
						"description": "map name"
					},
					"knifeForSide": {
						"type": "boolean"
					},
					"startAsCtTeam": {
						"$ref": "#/components/schemas/TTeamAB",
						"description": "may change after knife round"
					},
					"state": {
						"$ref": "#/components/schemas/TMatchMapSate"
					},
					"knifeWinner": {
						"$ref": "#/components/schemas/TTeamAB"
					},
					"readyTeams": {
						"properties": {
							"teamB": {
								"type": "boolean"
							},
							"teamA": {
								"type": "boolean"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object"
					},
					"knifeRestart": {
						"properties": {
							"teamB": {
								"type": "boolean"
							},
							"teamA": {
								"type": "boolean"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object"
					},
					"score": {
						"properties": {
							"teamB": {
								"type": "number",
								"format": "double"
							},
							"teamA": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object"
					},
					"overTimeEnabled": {
						"type": "boolean"
					},
					"overTimeMaxRounds": {
						"type": "number",
						"format": "double"
					},
					"maxRounds": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"knifeForSide",
					"startAsCtTeam",
					"state",
					"readyTeams",
					"knifeRestart",
					"score",
					"overTimeEnabled",
					"overTimeMaxRounds",
					"maxRounds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TMatchEndAction": {
				"type": "string",
				"enum": [
					"KICK_ALL",
					"QUIT_SERVER",
					"NONE"
				]
			},
			"TLogType": {
				"type": "string",
				"enum": [
					"CHAT",
					"SYSTEM"
				]
			},
			"ILogChat": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"CHAT"
						],
						"nullable": false
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"isTeamChat": {
						"type": "boolean"
					},
					"steamId64": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"timestamp",
					"isTeamChat",
					"steamId64",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TSystemLogCategory": {
				"type": "string",
				"enum": [
					"ERROR",
					"WARN",
					"INFO",
					"DEBUG"
				]
			},
			"ILogSystem": {
				"properties": {
					"type": {
						"type": "string",
						"enum": [
							"SYSTEM"
						],
						"nullable": false
					},
					"timestamp": {
						"type": "number",
						"format": "double"
					},
					"category": {
						"$ref": "#/components/schemas/TSystemLogCategory"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"type",
					"timestamp",
					"category",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TLogUnion": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ILogChat"
					},
					{
						"$ref": "#/components/schemas/ILogSystem"
					}
				]
			},
			"IPlayer": {
				"properties": {
					"steamId64": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"team": {
						"$ref": "#/components/schemas/TTeamAB"
					}
				},
				"required": [
					"steamId64",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TMatchMode": {
				"type": "string",
				"enum": [
					"SINGLE",
					"LOOP"
				]
			},
			"IMatch": {
				"properties": {
					"id": {
						"type": "string",
						"description": "tmt2 identifier for this match"
					},
					"state": {
						"$ref": "#/components/schemas/TMatchSate"
					},
					"passthrough": {
						"type": "string",
						"description": "e.g. remote identifier, will be present in every response/webhook"
					},
					"mapPool": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The maps the players can pick or ban.\nWill also be used if a map is chosen randomly.\nIf the map is fixed it will not be removed from the map pool."
					},
					"teamA": {
						"$ref": "#/components/schemas/ITeam"
					},
					"teamB": {
						"$ref": "#/components/schemas/ITeam"
					},
					"electionSteps": {
						"items": {
							"$ref": "#/components/schemas/IElectionStep"
						},
						"type": "array"
					},
					"election": {
						"$ref": "#/components/schemas/IElection",
						"description": "election state data"
					},
					"gameServer": {
						"$ref": "#/components/schemas/IGameServer"
					},
					"logSecret": {
						"type": "string",
						"description": "log secret that is given as part of the url to the cs go server it will send the logs to"
					},
					"parseIncomingLogs": {
						"type": "boolean",
						"description": "Indicates if incoming logs from the cs go server are parsed (otherwise they will be dropped without any action).\nWill be set to true if match is loaded from storage (after a short delay)."
					},
					"matchMaps": {
						"items": {
							"$ref": "#/components/schemas/IMatchMap"
						},
						"type": "array",
						"description": "The maps which will be played. If match state is still ELECTION than this is not final."
					},
					"currentMap": {
						"type": "number",
						"format": "double",
						"description": "Index of the matchMaps array indicating the current map."
					},
					"webhookUrl": {
						"type": "string",
						"nullable": true,
						"description": "if set various events will be posted to this url"
					},
					"rconCommands": {
						"properties": {
							"end": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed after last match map"
							},
							"match": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every match map start"
							},
							"knife": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every knife round"
							},
							"init": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed exactly once on match init"
							}
						},
						"required": [
							"end",
							"match",
							"knife",
							"init"
						],
						"type": "object"
					},
					"canClinch": {
						"type": "boolean",
						"description": "defaults to true, means that possibly not all maps will be played if the winner is determined before"
					},
					"matchEndAction": {
						"$ref": "#/components/schemas/TMatchEndAction",
						"description": "defaults to NONE"
					},
					"logs": {
						"items": {
							"$ref": "#/components/schemas/TLogUnion"
						},
						"type": "array"
					},
					"players": {
						"items": {
							"$ref": "#/components/schemas/IPlayer"
						},
						"type": "array"
					},
					"tmtSecret": {
						"type": "string",
						"description": "Access token to be used in the API."
					},
					"isStopped": {
						"type": "boolean",
						"description": "If match is finished or if the match was stopped/deleted this is true."
					},
					"serverPassword": {
						"type": "string",
						"description": "Server password, periodically fetched from game server"
					},
					"tmtLogAddress": {
						"type": "string",
						"description": "if set will be used to register the target logaddress for the game server"
					},
					"createdAt": {
						"type": "number",
						"format": "double",
						"description": "Creation date (unix time in milliseconds since midnight, January 1, 1970 UTC)"
					},
					"mode": {
						"$ref": "#/components/schemas/TMatchMode",
						"description": "Match mode (single: stops when match is finished, loop: starts again after match is finished)"
					}
				},
				"required": [
					"id",
					"state",
					"mapPool",
					"teamA",
					"teamB",
					"electionSteps",
					"election",
					"gameServer",
					"logSecret",
					"parseIncomingLogs",
					"matchMaps",
					"currentMap",
					"webhookUrl",
					"rconCommands",
					"canClinch",
					"matchEndAction",
					"logs",
					"players",
					"tmtSecret",
					"isStopped",
					"serverPassword",
					"createdAt",
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ITeamCreateDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"passthrough": {
						"type": "string",
						"description": "e.g. remote identifier, will be present in every response/webhook"
					},
					"advantage": {
						"type": "number",
						"format": "double",
						"description": "defaults to 0 (no advantage)"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IMatchCreateDto": {
				"properties": {
					"passthrough": {
						"type": "string",
						"description": "e.g. remote identifier, will be present in every response/webhook"
					},
					"mapPool": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The maps the players can pick or ban.\nWill also be used if a map is chosen randomly.\nIf the map is fixed it will not be removed from the map pool."
					},
					"teamA": {
						"$ref": "#/components/schemas/ITeamCreateDto"
					},
					"teamB": {
						"$ref": "#/components/schemas/ITeamCreateDto"
					},
					"electionSteps": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/IElectionStepAdd"
								},
								{
									"$ref": "#/components/schemas/IElectionStepSkip"
								}
							]
						},
						"type": "array"
					},
					"gameServer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/IGameServer"
							}
						],
						"nullable": true
					},
					"webhookUrl": {
						"type": "string",
						"nullable": true,
						"description": "if set various events will be posted to this url"
					},
					"rconCommands": {
						"properties": {
							"end": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed after last match map"
							},
							"match": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every match map start"
							},
							"knife": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every knife round"
							},
							"init": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed exactly once on match init"
							}
						},
						"type": "object"
					},
					"canClinch": {
						"type": "boolean",
						"description": "defaults to true, means that possibly not all maps will be played if the winner is determined before"
					},
					"matchEndAction": {
						"$ref": "#/components/schemas/TMatchEndAction",
						"description": "defaults to NONE"
					},
					"tmtLogAddress": {
						"type": "string",
						"description": "if set will be used to register the target logaddress for the game server"
					},
					"mode": {
						"$ref": "#/components/schemas/TMatchMode",
						"description": "Match mode (single: stops when match is finished, loop: starts again after match is finished)"
					}
				},
				"required": [
					"mapPool",
					"teamA",
					"teamB",
					"electionSteps",
					"gameServer"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IMatchResponse": {
				"properties": {
					"id": {
						"type": "string",
						"description": "tmt2 identifier for this match"
					},
					"state": {
						"$ref": "#/components/schemas/TMatchSate"
					},
					"passthrough": {
						"type": "string",
						"description": "e.g. remote identifier, will be present in every response/webhook"
					},
					"mapPool": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The maps the players can pick or ban.\nWill also be used if a map is chosen randomly.\nIf the map is fixed it will not be removed from the map pool."
					},
					"teamA": {
						"$ref": "#/components/schemas/ITeam"
					},
					"teamB": {
						"$ref": "#/components/schemas/ITeam"
					},
					"electionSteps": {
						"items": {
							"$ref": "#/components/schemas/IElectionStep"
						},
						"type": "array"
					},
					"election": {
						"$ref": "#/components/schemas/IElection",
						"description": "election state data"
					},
					"gameServer": {
						"$ref": "#/components/schemas/IGameServer"
					},
					"logSecret": {
						"type": "string",
						"description": "log secret that is given as part of the url to the cs go server it will send the logs to"
					},
					"parseIncomingLogs": {
						"type": "boolean",
						"description": "Indicates if incoming logs from the cs go server are parsed (otherwise they will be dropped without any action).\nWill be set to true if match is loaded from storage (after a short delay)."
					},
					"matchMaps": {
						"items": {
							"$ref": "#/components/schemas/IMatchMap"
						},
						"type": "array",
						"description": "The maps which will be played. If match state is still ELECTION than this is not final."
					},
					"currentMap": {
						"type": "number",
						"format": "double",
						"description": "Index of the matchMaps array indicating the current map."
					},
					"webhookUrl": {
						"type": "string",
						"nullable": true,
						"description": "if set various events will be posted to this url"
					},
					"rconCommands": {
						"properties": {
							"end": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed after last match map"
							},
							"match": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every match map start"
							},
							"knife": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every knife round"
							},
							"init": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed exactly once on match init"
							}
						},
						"required": [
							"end",
							"match",
							"knife",
							"init"
						],
						"type": "object"
					},
					"canClinch": {
						"type": "boolean",
						"description": "defaults to true, means that possibly not all maps will be played if the winner is determined before"
					},
					"matchEndAction": {
						"$ref": "#/components/schemas/TMatchEndAction",
						"description": "defaults to NONE"
					},
					"logs": {
						"items": {
							"$ref": "#/components/schemas/TLogUnion"
						},
						"type": "array"
					},
					"players": {
						"items": {
							"$ref": "#/components/schemas/IPlayer"
						},
						"type": "array"
					},
					"tmtSecret": {
						"type": "string",
						"description": "Access token to be used in the API."
					},
					"isStopped": {
						"type": "boolean",
						"description": "If match is finished or if the match was stopped/deleted this is true."
					},
					"serverPassword": {
						"type": "string",
						"description": "Server password, periodically fetched from game server"
					},
					"tmtLogAddress": {
						"type": "string",
						"description": "if set will be used to register the target logaddress for the game server"
					},
					"createdAt": {
						"type": "number",
						"format": "double",
						"description": "Creation date (unix time in milliseconds since midnight, January 1, 1970 UTC)"
					},
					"mode": {
						"$ref": "#/components/schemas/TMatchMode",
						"description": "Match mode (single: stops when match is finished, loop: starts again after match is finished)"
					},
					"isLive": {
						"type": "boolean"
					}
				},
				"required": [
					"id",
					"state",
					"mapPool",
					"teamA",
					"teamB",
					"electionSteps",
					"election",
					"gameServer",
					"logSecret",
					"parseIncomingLogs",
					"matchMaps",
					"currentMap",
					"webhookUrl",
					"rconCommands",
					"canClinch",
					"matchEndAction",
					"logs",
					"players",
					"tmtSecret",
					"isStopped",
					"serverPassword",
					"createdAt",
					"mode",
					"isLive"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EventType": {
				"type": "string",
				"enum": [
					"CHAT",
					"ELECTION_MAP_STEP",
					"ELECTION_SIDE_STEP",
					"MAP_ELECTION_END",
					"KNIFE_END",
					"ROUND_END",
					"MAP_START",
					"MAP_END",
					"MATCH_END",
					"LOG",
					"MATCH_CREATE",
					"MATCH_UPDATE"
				]
			},
			"ChatEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"CHAT"
						],
						"nullable": false
					},
					"player": {
						"allOf": [
							{
								"$ref": "#/components/schemas/IPlayer"
							}
						],
						"nullable": true
					},
					"playerTeam": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ITeam"
							}
						],
						"nullable": true
					},
					"message": {
						"type": "string"
					},
					"isTeamChat": {
						"type": "boolean"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"player",
					"playerTeam",
					"message",
					"isTeamChat"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ElectionEndEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"MAP_ELECTION_END"
						],
						"nullable": false
					},
					"mapNames": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mapNames"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RoundEndEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"ROUND_END"
						],
						"nullable": false
					},
					"mapIndex": {
						"type": "number",
						"format": "double"
					},
					"mapName": {
						"type": "string"
					},
					"winnerTeam": {
						"$ref": "#/components/schemas/ITeam"
					},
					"scoreTeamA": {
						"type": "number",
						"format": "double"
					},
					"scoreTeamB": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mapIndex",
					"mapName",
					"winnerTeam",
					"scoreTeamA",
					"scoreTeamB"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MapEndEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"MAP_END"
						],
						"nullable": false
					},
					"mapIndex": {
						"type": "number",
						"format": "double"
					},
					"mapName": {
						"type": "string"
					},
					"scoreTeamA": {
						"type": "number",
						"format": "double"
					},
					"scoreTeamB": {
						"type": "number",
						"format": "double"
					},
					"winnerTeam": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ITeam"
							}
						],
						"nullable": true,
						"description": "winner of the match or null if it's a draw"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mapIndex",
					"mapName",
					"scoreTeamA",
					"scoreTeamB",
					"winnerTeam"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MatchEndEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"MATCH_END"
						],
						"nullable": false
					},
					"wonMapsTeamA": {
						"type": "number",
						"format": "double"
					},
					"wonMapsTeamB": {
						"type": "number",
						"format": "double"
					},
					"winnerTeam": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ITeam"
							}
						],
						"nullable": true,
						"description": "winner of the match or null if it's a draw"
					},
					"mapResults": {
						"items": {
							"properties": {
								"winnerTeam": {
									"allOf": [
										{
											"$ref": "#/components/schemas/ITeam"
										}
									],
									"nullable": true,
									"description": "winner of the match or null if it's a draw"
								},
								"scoreTeamB": {
									"type": "number",
									"format": "double"
								},
								"scoreTeamA": {
									"type": "number",
									"format": "double"
								},
								"mapName": {
									"type": "string"
								}
							},
							"required": [
								"winnerTeam",
								"scoreTeamB",
								"scoreTeamA",
								"mapName"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"wonMapsTeamA",
					"wonMapsTeamB",
					"winnerTeam",
					"mapResults"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KnifeRoundEndEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"KNIFE_END"
						],
						"nullable": false
					},
					"mapIndex": {
						"type": "number",
						"format": "double"
					},
					"mapName": {
						"type": "string"
					},
					"winnerTeam": {
						"$ref": "#/components/schemas/ITeam"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mapIndex",
					"mapName",
					"winnerTeam"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MapStartEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"MAP_START"
						],
						"nullable": false
					},
					"mapIndex": {
						"type": "number",
						"format": "double"
					},
					"mapName": {
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mapIndex",
					"mapName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"LOG"
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TMapMode": {
				"type": "string",
				"enum": [
					"FIXED",
					"BAN",
					"PICK",
					"RANDOM_BAN",
					"RANDOM_PICK",
					"AGREE"
				]
			},
			"ElectionMapStep": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"ELECTION_MAP_STEP"
						],
						"nullable": false
					},
					"mode": {
						"$ref": "#/components/schemas/TMapMode"
					},
					"mapName": {
						"type": "string"
					},
					"pickerTeam": {
						"$ref": "#/components/schemas/ITeam"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mode",
					"mapName"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TSideMode": {
				"type": "string",
				"enum": [
					"FIXED",
					"PICK",
					"RANDOM",
					"KNIFE"
				]
			},
			"TTeamSides": {
				"type": "string",
				"enum": [
					"CT",
					"T"
				]
			},
			"ElectionSideStep": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"ELECTION_SIDE_STEP"
						],
						"nullable": false
					},
					"mode": {
						"$ref": "#/components/schemas/TSideMode"
					},
					"pickerTeam": {
						"$ref": "#/components/schemas/ITeam"
					},
					"pickerSide": {
						"$ref": "#/components/schemas/TTeamSides"
					},
					"ctTeam": {
						"$ref": "#/components/schemas/ITeam"
					},
					"tTeam": {
						"$ref": "#/components/schemas/ITeam"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"mode"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MatchCreateEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"MATCH_CREATE"
						],
						"nullable": false
					},
					"match": {
						"$ref": "#/components/schemas/IMatchResponse"
					}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"match"
				],
				"type": "object",
				"additionalProperties": false
			},
			"MatchUpdateEvent": {
				"properties": {
					"timestamp": {
						"type": "string",
						"description": "ISO"
					},
					"matchId": {
						"type": "string"
					},
					"matchPassthrough": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"type": "string",
						"enum": [
							"MATCH_UPDATE"
						],
						"nullable": false
					},
					"path": {
						"items": {
							"anyOf": [
								{
									"type": "string"
								},
								{
									"type": "number",
									"format": "double"
								}
							]
						},
						"type": "array"
					},
					"value": {}
				},
				"required": [
					"timestamp",
					"matchId",
					"matchPassthrough",
					"type",
					"path",
					"value"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Event": {
				"anyOf": [
					{
						"$ref": "#/components/schemas/ChatEvent"
					},
					{
						"$ref": "#/components/schemas/ElectionEndEvent"
					},
					{
						"$ref": "#/components/schemas/RoundEndEvent"
					},
					{
						"$ref": "#/components/schemas/MapEndEvent"
					},
					{
						"$ref": "#/components/schemas/MatchEndEvent"
					},
					{
						"$ref": "#/components/schemas/KnifeRoundEndEvent"
					},
					{
						"$ref": "#/components/schemas/MapStartEvent"
					},
					{
						"$ref": "#/components/schemas/LogEvent"
					},
					{
						"$ref": "#/components/schemas/ElectionMapStep"
					},
					{
						"$ref": "#/components/schemas/ElectionSideStep"
					},
					{
						"$ref": "#/components/schemas/MatchCreateEvent"
					},
					{
						"$ref": "#/components/schemas/MatchUpdateEvent"
					}
				]
			},
			"IMatchUpdateDto": {
				"properties": {
					"passthrough": {
						"type": "string",
						"description": "e.g. remote identifier, will be present in every response/webhook"
					},
					"mapPool": {
						"items": {
							"type": "string"
						},
						"type": "array",
						"description": "The maps the players can pick or ban.\nWill also be used if a map is chosen randomly.\nIf the map is fixed it will not be removed from the map pool."
					},
					"teamA": {
						"$ref": "#/components/schemas/ITeamCreateDto"
					},
					"teamB": {
						"$ref": "#/components/schemas/ITeamCreateDto"
					},
					"electionSteps": {
						"items": {
							"anyOf": [
								{
									"$ref": "#/components/schemas/IElectionStepAdd"
								},
								{
									"$ref": "#/components/schemas/IElectionStepSkip"
								}
							]
						},
						"type": "array"
					},
					"gameServer": {
						"allOf": [
							{
								"$ref": "#/components/schemas/IGameServer"
							}
						],
						"nullable": true
					},
					"webhookUrl": {
						"type": "string",
						"nullable": true,
						"description": "if set various events will be posted to this url"
					},
					"rconCommands": {
						"properties": {
							"end": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed after last match map"
							},
							"match": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every match map start"
							},
							"knife": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed before every knife round"
							},
							"init": {
								"items": {
									"type": "string"
								},
								"type": "array",
								"description": "executed exactly once on match init"
							}
						},
						"type": "object"
					},
					"canClinch": {
						"type": "boolean",
						"description": "defaults to true, means that possibly not all maps will be played if the winner is determined before"
					},
					"matchEndAction": {
						"$ref": "#/components/schemas/TMatchEndAction",
						"description": "defaults to NONE"
					},
					"tmtLogAddress": {
						"type": "string",
						"description": "if set will be used to register the target logaddress for the game server"
					},
					"mode": {
						"$ref": "#/components/schemas/TMatchMode",
						"description": "Match mode (single: stops when match is finished, loop: starts again after match is finished)"
					},
					"state": {
						"$ref": "#/components/schemas/TMatchSate"
					},
					"logSecret": {
						"type": "string",
						"description": "updates the server's log address automatically"
					},
					"currentMap": {
						"type": "number",
						"format": "double"
					},
					"_restartElection": {
						"type": "boolean"
					},
					"_init": {
						"type": "boolean"
					},
					"_setup": {
						"type": "boolean"
					},
					"_execRconCommandsInit": {
						"type": "boolean"
					},
					"_execRconCommandsKnife": {
						"type": "boolean"
					},
					"_execRconCommandsMatch": {
						"type": "boolean"
					},
					"_execRconCommandsEnd": {
						"type": "boolean"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IMatchMapUpdateDto": {
				"properties": {
					"name": {
						"type": "string",
						"description": "map name"
					},
					"knifeForSide": {
						"type": "boolean"
					},
					"startAsCtTeam": {
						"$ref": "#/components/schemas/TTeamAB",
						"description": "may change after knife round"
					},
					"state": {
						"$ref": "#/components/schemas/TMatchMapSate"
					},
					"knifeWinner": {
						"$ref": "#/components/schemas/TTeamAB"
					},
					"readyTeams": {
						"properties": {
							"teamB": {
								"type": "boolean"
							},
							"teamA": {
								"type": "boolean"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object"
					},
					"knifeRestart": {
						"properties": {
							"teamB": {
								"type": "boolean"
							},
							"teamA": {
								"type": "boolean"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object"
					},
					"score": {
						"properties": {
							"teamB": {
								"type": "number",
								"format": "double"
							},
							"teamA": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"teamB",
							"teamA"
						],
						"type": "object"
					},
					"overTimeEnabled": {
						"type": "boolean"
					},
					"overTimeMaxRounds": {
						"type": "number",
						"format": "double"
					},
					"maxRounds": {
						"type": "number",
						"format": "double"
					},
					"_refreshOvertimeAndMaxRoundsSettings": {
						"type": "boolean",
						"description": "reads and refreshes mp_overtime_enable, mp_overtime_maxrounds and mp_maxrounds from rcon"
					},
					"_switchTeamInternals": {
						"type": "boolean",
						"description": "switch team internals, i.e. swap team names (and internal score)"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"IManagedGameServer": {
				"properties": {
					"ip": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"rconPassword": {
						"type": "string"
					},
					"hideRconPassword": {
						"type": "boolean"
					},
					"canBeUsed": {
						"type": "boolean"
					},
					"usedBy": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"ip",
					"port",
					"rconPassword",
					"canBeUsed",
					"usedBy"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IManagedGameServerCreateDto": {
				"properties": {
					"ip": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"rconPassword": {
						"type": "string"
					},
					"hideRconPassword": {
						"type": "boolean"
					},
					"canBeUsed": {
						"type": "boolean"
					}
				},
				"required": [
					"ip",
					"port",
					"rconPassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IManagedGameServerUpdateDto": {
				"properties": {
					"ip": {
						"type": "string"
					},
					"port": {
						"type": "number",
						"format": "double"
					},
					"rconPassword": {
						"type": "string"
					},
					"canBeUsed": {
						"type": "boolean"
					},
					"usedBy": {
						"type": "string",
						"nullable": true
					}
				},
				"required": [
					"ip",
					"port"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"bearer_token": {
				"type": "http",
				"scheme": "bearer"
			}
		}
	},
	"info": {
		"title": "tmt2-backend",
		"version": "2.0.0",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Jens Forstmann"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": []
			}
		},
		"/api/matches": {
			"post": {
				"operationId": "CreateMatch",
				"responses": {
					"201": {
						"description": "",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IMatch"
								}
							}
						}
					}
				},
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IMatchCreateDto"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetAllMatches",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IMatchResponse"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "state",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "passthrough",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "isStopped",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "isLive",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/api/matches/{id}": {
			"get": {
				"operationId": "GetMatch",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"$ref": "#/components/schemas/IMatchResponse"
										},
										{}
									]
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"patch": {
				"operationId": "UpdateMatch",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IMatchUpdateDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteMatch",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/matches/{id}/logs": {
			"get": {
				"operationId": "GetLogs",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"type": "string"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/matches/{id}/events": {
			"get": {
				"operationId": "GetEvents",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Event"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/matches/{id}/server/round_backups": {
			"get": {
				"operationId": "GetRoundBackups",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"properties": {
												"total": {
													"type": "number",
													"format": "double"
												},
												"latestFiles": {
													"items": {
														"type": "string"
													},
													"type": "array"
												}
											},
											"required": [
												"total",
												"latestFiles"
											],
											"type": "object"
										},
										{}
									]
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "count",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/matches/{id}/server/round_backups/{file}": {
			"post": {
				"operationId": "LoadRoundBackup",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"type": "boolean"
										},
										{}
									]
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "file",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/matches/{id}/matchMap/{mapNumber}": {
			"patch": {
				"operationId": "UpdateMatchMap",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "mapNumber",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IMatchMapUpdateDto"
							}
						}
					}
				}
			}
		},
		"/api/matches/{id}/revive": {
			"patch": {
				"operationId": "ReviveMatch",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/matches/{id}/server/rcon": {
			"post": {
				"operationId": "Rcon",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"anyOf": [
										{
											"items": {
												"type": "string"
											},
											"type": "array"
										},
										{}
									]
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"type": "string"
								},
								"type": "array"
							}
						}
					}
				}
			}
		},
		"/api/matches/{id}/server/log/{secret}": {
			"post": {
				"operationId": "ReceiveLog",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "secret",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {}
						}
					}
				}
			}
		},
		"/api/gameservers": {
			"get": {
				"operationId": "GetGameServers",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/IManagedGameServer"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateGameServer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IManagedGameServer"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IManagedGameServerCreateDto"
							}
						}
					}
				}
			}
		},
		"/api/gameservers/{ip}/{port}": {
			"patch": {
				"operationId": "UpdateGameServer",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/IManagedGameServer"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IManagedGameServerUpdateDto"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteGameServer",
				"responses": {
					"204": {
						"description": "No content"
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "ip",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "path",
						"name": "port",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/api/debug/webSockets": {
			"get": {
				"operationId": "GetWebSocketClients",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"items": {},
									"type": "array"
								}
							}
						}
					}
				},
				"security": [
					{
						"bearer_token": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}